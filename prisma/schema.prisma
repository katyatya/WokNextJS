generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id       Int    @id @default(autoincrement())

  fullName String
  email    String @unique @default("")
  password String?

  role UserRole   @default(USER)
  verified DateTime?
  provider String? 
  providerId String?

  cart Cart?
  order Order[]
  verificationCode VerificationCode?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

}
model Product{
  id Int @id @default(autoincrement())

  name        String
  imageUrl    String

  category Category @relation(fields: [categoryId],references: [id])
  categoryId  Int
  ingredients Ingredient[]
  variations ProductVariation[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProductVariation{
  id Int @id @default(autoincrement())

  price   Int
  size    String?
  wokType Int?

  cartItems CartItem[]

  product  Product @relation(fields: [productId],references: [id])
  productId Int
  }

model Category {
  id Int @id @default(autoincrement())

  name String @unique
  products Product[]
}

model Ingredient{
  id Int @id @default(autoincrement())

  name String @unique
  price Int
  imageUrl String

  products Product[]
  cartItems CartItem[]

}

model Cart{
  id Int @id @default(autoincrement())

  totalAmount Int @default(0)
  token String

  user  User? @relation(fields: [userId],references: [id])
  userId Int?  @unique

  items CartItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem{
  id Int @id @default(autoincrement())

  productVariation ProductVariation @relation(fields: [productVariationId],references: [id])
  productVariationId Int

  cart Cart @relation(fields: [cartId],references: [id])
  cartId Int

  quantity Int @default(1)
  ingredients Ingredient[]


  createdAt     DateTime  @default(now())
  updatedAt DateTime @updatedAt
}

model Order{
  id Int @id @default(autoincrement())

  user User? @relation(fields: [userId],references: [id])
  userId Int?

  token String
  totalAmount Int
  status OrderStatus
  paymentId String?

  items Json
  fullName String
  address String
  email String
  phone String
  comment String?


  createdAt     DateTime  @default(now())
  updatedAt DateTime @updatedAt

}

model VerificationCode {
  id Int @id @default(autoincrement())

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  code      String 
  createdAt DateTime @default(now())

  @@unique([userId,code]) //группа правильнее, идет проверка && иначе ||

}
model Story {
    id              Int    @id @default(autoincrement())
    previewImageUrl String

    items StoryItem[]

    createdAt DateTime @default(now())
}

model StoryItem {
    id Int @id @default(autoincrement())

    storyId Int
    story   Story @relation(fields: [storyId], references: [id])

    sourceUrl String

    createdAt DateTime @default(now())
}


enum OrderStatus{
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}